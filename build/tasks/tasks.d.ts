import { Context } from '../context';
import { Broadcast } from '../broadcast';
import { Models } from '../models/models';
import { MakeOpenOrderLike } from '../tasks.d/make-open-order/make-open-order-like';
import { CancelOpenOrderLike } from '../tasks.d/cancel-open-order/cancel-open-order-like';
import { GetBalancesLike } from '../tasks.d/get-balances/get-balances-like';
import { GetClosableLike } from '../tasks.d/get-closable/get-closable-like';
import { GetPositionsLike } from '../tasks.d/get-positions/get-positions-like';
import { OrderMakesLike } from '../tasks.d/order-makes/order-makes-like';
import { OrderTakesLike } from '../tasks.d/order-takes/order-takes-like';
import { TradeTakesOpenMakersLike } from '../tasks.d/trade-takes-open-makers/trade-takes-open-makers-like';
import { ValidateOrderLike } from '../tasks.d/validate-order/validate-order-like';
import { OrderVolumesLike } from '../tasks.d/order-volumes/order-volumes-like';
import { GetAvailableLike } from '../tasks.d/get-available/get-available-like';
import { SettleLike } from '../tasks.d/settle/settle-like';
import { MarginAccumulationLike } from '../tasks.d/margin-accumulation/margin-accumulation-like';
import { HLike } from 'interfaces';
export declare abstract class Tasks<H extends HLike<H>> {
    readonly getBalances: GetBalancesLike<H>;
    readonly getPositions: GetPositionsLike<H>;
    abstract readonly getAvailable: GetAvailableLike<H>;
    readonly getClosable: GetClosableLike<H>;
    abstract readonly settle: SettleLike;
    readonly orderMakes: OrderMakesLike<H>;
    readonly tradeTakesOpenMakers: TradeTakesOpenMakersLike<H>;
    readonly orderTakes: OrderTakesLike<H>;
    readonly validateOrder: ValidateOrderLike<H>;
    readonly makeOpenOrder: MakeOpenOrderLike<H>;
    readonly cancelOpenOrder: CancelOpenOrderLike<H>;
    abstract readonly marginAccumulation: MarginAccumulationLike<H>;
    readonly orderVolumes: OrderVolumesLike<H>;
    constructor(context: Context<H>, models: Models<H>, broadcast: Broadcast<H>);
}
