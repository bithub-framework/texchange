import { HLike, HStatic } from 'secretary-like';
import { BaseContainer } from 'injektor';
import { TYPES } from './types';
import { Context } from '../context';
import { Config } from '../context.d/config';
import { TimelineLike } from 'secretary-like';
import { DataStatic } from '../interfaces/data';
import { MarketCalc } from 'secretary-like';
import { Models } from '../models';
import { Makers } from '../models.d/makers/makers';
import { Pricing } from '../models.d/pricing/pricing';
import { Broadcast } from '../broadcast';
import { Mtm } from '../mark-to-market/mtm';
import { Tasks } from '../tasks/tasks';
import { UpdateTrades } from '../use-cases.d/update-trades';
import { UseCases } from '../use-cases';
import { Facades } from '../facades';
import { Texchange } from '../texchange';
import { AdminTex } from '../texchange';
import { UserTex } from '../texchange';
export declare abstract class Container<H extends HLike<H>> extends BaseContainer {
    private config;
    private timeline;
    private H;
    constructor(config: Config<H>, timeline: TimelineLike, H: HStatic<H>);
    [TYPES.Config]: () => Config<H>;
    [TYPES.TimelineLike]: () => TimelineLike;
    [TYPES.HStatic]: () => HStatic<H>;
    abstract [TYPES.MarketCalc]: () => MarketCalc<H>;
    [TYPES.DataStatic]: () => DataStatic<H>;
    [TYPES.Context]: () => Context<H>;
    abstract [TYPES.Makers]: () => Makers<H>;
    abstract [TYPES.Pricing]: () => Pricing<H, any>;
    [TYPES.Models]: () => Models<H>;
    abstract [TYPES.Mtm]: () => Mtm<H> | null;
    [TYPES.Broadcast]: () => Broadcast<H>;
    abstract [TYPES.Tasks]: () => Tasks<H>;
    abstract [TYPES.UpdateTrades]: () => UpdateTrades<H>;
    [TYPES.UseCases]: () => UseCases<H>;
    [TYPES.Facades]: () => Facades<H>;
    [TYPES.UserTex]: () => UserTex<H>;
    [TYPES.AdminTex]: () => AdminTex<H>;
    [TYPES.Texchange]: () => Texchange<H>;
}
